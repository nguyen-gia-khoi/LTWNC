@page
@model LTWNC.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Quản lý Sản phẩm";
}

<h2>Quản lý Sản phẩm</h2>

<!-- Form tạo sản phẩm mới -->
<form id="createForm" enctype="multipart/form-data">
    <div class="mb-2">
        <input name="name" class="form-control" placeholder="Tên sản phẩm" required />
    </div>
    <div class="mb-2">
        <input name="price" type="number" step="0.01" class="form-control" placeholder="Giá" required />
    </div>
    <div class="mb-2">
        <textarea name="description" class="form-control" placeholder="Mô tả"></textarea>
    </div>
    <div class="mb-2">
        <select name="categoryId" id="categorySelect" class="form-select" required>
            <option value="">-- Chọn danh mục --</option>
        </select>
    </div>

    <!-- Biến thể sản phẩm -->
    <div class="mb-3 border p-3 rounded bg-light">
        <div class="row mb-2">
            <div class="col">
                <select id="colorSelect" class="form-select" required></select>
            </div>
            <div class="col">
                <select id="sizeSelect" class="form-select" required></select>
            </div>
            <div class="col">
                <input type="number" id="quantityInput" class="form-control" placeholder="Số lượng" required />
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-success" onclick="addVariant()">Thêm biến thể</button>
            </div>
        </div>

        <ul id="variantList" class="list-group mb-2"></ul>
        <input type="hidden" name="variantsJson" id="variantsJson" />
    </div>

    <div class="mb-2">
        <input name="images" type="file" multiple class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Tạo sản phẩm</button>
</form>

<hr />

<!-- Danh sách sản phẩm -->
<div id="productList" class="row"></div>

<!-- Phân trang -->
<nav>
    <ul class="pagination justify-content-center mt-3" id="pagination"></ul>
</nav>

@section Scripts {
    <script>
        let currentPage = 1;
        const pageSize = 6;

        const variantList = [];
        const colorMap = new Map();
        const sizeMap = new Map();
        const categoryMap = new Map();

        async function loadDropdowns() {
            const [colorRes, sizeRes, categoryRes] = await Promise.all([
                fetch('/api/colors/all'),
                fetch('/api/sizes/all'),
                fetch('/api/categories/all')
            ]);

            const colors = await colorRes.json();
            const sizes = await sizeRes.json();
            const categories = await categoryRes.json();

            const colorSelect = document.getElementById('colorSelect');
            const sizeSelect = document.getElementById('sizeSelect');
            const categorySelect = document.getElementById('categorySelect');

            colors.forEach(c => {
                colorMap.set(c.id, c.colors_name);
                colorSelect.innerHTML += `<option value="${c.id}">${c.colors_name}</option>`;
            });

            sizes.forEach(s => {
                sizeMap.set(s.id, s.size_name);
                sizeSelect.innerHTML += `<option value="${s.id}">${s.size_name}</option>`;
            });

            categories.forEach(cat => {
                categoryMap.set(cat.id, cat.categories_name);
                categorySelect.innerHTML += `<option value="${cat.id}">${cat.categories_name}</option>`;
            });
        }

        function addVariant() {
            const colorId = document.getElementById('colorSelect').value;
            const sizeId = document.getElementById('sizeSelect').value;
            const quantity = parseInt(document.getElementById('quantityInput').value);

            if (!colorId || !sizeId || !quantity || quantity <= 0) {
                alert("Vui lòng nhập đầy đủ và hợp lệ.");
                return;
            }

            const variant = { colorId, sizeId, quantity };
            variantList.push(variant);
            updateVariantList();
        }

        function updateVariantList() {
            const list = document.getElementById('variantList');
            list.innerHTML = "";

            variantList.forEach((v, i) => {
                const item = document.createElement("li");
                item.className = "list-group-item d-flex justify-content-between align-items-center";
                item.innerHTML = `
                    ${colorMap.get(v.colorId)} - ${sizeMap.get(v.sizeId)} - SL: ${v.quantity}
                    <button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(${i})">X</button>
                `;
                list.appendChild(item);
            });

            document.getElementById('variantsJson').value = JSON.stringify(variantList);
        }

        function removeVariant(index) {
            variantList.splice(index, 1);
            updateVariantList();
        }

        async function loadProducts(page = 1) {
            const res = await fetch(`/api/products?page=${page}&pageSize=${pageSize}`);
            const data = await res.json();
            const container = document.getElementById("productList");
            container.innerHTML = "";

            data.items.forEach(p => {
                const categoryName = categoryMap.get(p.categoryId) ?? "Không rõ";
                let variantsHtml = "";
                p.variants?.forEach(v => {
                    const colorName = colorMap.get(v.colorId) ?? v.colorId;
                    const sizeName = sizeMap.get(v.sizeId) ?? v.sizeId;
                    variantsHtml += `<li>${colorName} - ${sizeName} - SL: ${v.quantity}</li>`;
                });

                container.innerHTML += `
                    <div class="col-md-4">
                        <div class="card mb-3">
                            <img src="${p.images?.[0] || ''}" class="card-img-top" style="height: 200px; object-fit: cover;" />
                            <div class="card-body">
                                <h5 class="card-title">${p.name}</h5>
                                <p class="card-text">${p.description ?? ''}</p>
                                <p class="card-text"><strong>Giá:</strong> ${p.price}</p>
                                <p class="card-text"><strong>Danh mục:</strong> ${categoryName}</p>
                                <p class="card-text"><strong>Biến thể:</strong></p>
                                <ul>${variantsHtml}</ul>
                                <div class="d-flex justify-content-between">
                                    <button class="btn btn-warning btn-sm" onclick="editProduct('${p.id}')">Sửa</button>
                                    <button class="btn btn-danger btn-sm" onclick="deleteProduct('${p.id}')">Xóa</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
            });

            const pagEl = document.getElementById("pagination");
            pagEl.innerHTML = "";
            for (let i = 1; i <= data.totalPages; i++) {
                pagEl.innerHTML += `<li class="page-item ${i === data.currentPage ? 'active' : ''}">
                    <button class="page-link" onclick="loadProducts(${i})">${i}</button>
                </li>`;
            }
        }

        async function deleteProduct(id) {
            if (!confirm("Xác nhận xoá?")) return;
            const res = await fetch(`/api/products/${id}`, { method: "DELETE" });
            if (res.ok) {
                alert("Đã xoá");
                loadProducts(currentPage);
            } else {
                alert("Không tìm thấy sản phẩm");
            }
        }

                let editingProductId = null; // Để kiểm tra đang ở chế độ sửa hay tạo mới

                function editProduct(id) {
            fetch(`/api/products/${id}`)
                .then(async res => {
                    if (!res.ok) {
                        const errText = await res.text();
                        throw new Error(`Lỗi API: ${res.status} - ${errText}`);
                    }
                    return res.json();
                })
                .then(p => {
                    editingProductId = p.id;

                    document.querySelector('input[name="name"]').value = p.name;
                    document.querySelector('input[name="price"]').value = p.price;
                    document.querySelector('textarea[name="description"]').value = p.description ?? '';
                    document.querySelector('select[name="categoryId"]').value = p.categoryId;

                    // Load biến thể vào form
                    variantList.length = 0;
                    (p.variants ?? []).forEach(v => {
                        variantList.push({
                            colorId: v.colorId,
                            sizeId: v.sizeId,
                            quantity: v.quantity
                        });
                    });
                    updateVariantList();

                    // Cuộn lên đầu trang
                    window.scrollTo({ top: 0, behavior: 'smooth' });

                    // Đổi nút thành "Cập nhật"
                    document.querySelector('#createForm button[type="submit"]').textContent = "Cập nhật sản phẩm";
                })
                .catch(err => alert("Lỗi khi tải sản phẩm: " + err.message));
        }



                document.getElementById("createForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            // Đảm bảo luôn update giá trị variantsJson trước khi submit
            document.getElementById('variantsJson').value = JSON.stringify(variantList);

            const formData = new FormData(this);

            let url = "/api/products";
            let method = "POST";

            if (editingProductId) {
                url += `/${editingProductId}`;
                method = "PUT";
                formData.append("id", editingProductId); // Tuỳ backend có cần hay không
            }

            const res = await fetch(url, {
                method,
                body: formData
            });

            if (res.ok) {
                editingProductId = null;
                document.querySelector('#createForm button[type="submit"]').textContent = "Tạo sản phẩm";
                alert("Tạo thành công!");
                this.reset();
                variantList.length = 0;
                updateVariantList();
                loadProducts(1);
            } else {
                const err = await res.text();
                alert("Lỗi: " + err);
            }
        });

        loadDropdowns().then(() => loadProducts());
    </script>
}
