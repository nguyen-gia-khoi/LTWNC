@page
@model LTWNC.Pages.Products.IndexModel
@{
    ViewData["Title"] = "Quản lý Sản phẩm";
}

<h2>Quản lý Sản phẩm</h2>

<!-- Form tạo sản phẩm mới -->
<form id="createForm" enctype="multipart/form-data">
    <div class="mb-2">
        <input name="name" class="form-control" placeholder="Tên sản phẩm" required />
    </div>
    <div class="mb-2">
        <input name="price" type="number" step="0.01" class="form-control" placeholder="Giá" required />
    </div>
    <div class="mb-2">
        <textarea name="description" class="form-control" placeholder="Mô tả"></textarea>
    </div>
    <div class="mb-2">
        <select name="categoryId" id="categorySelect" class="form-select" required>
            <option value="">-- Chọn danh mục --</option>
        </select>
    </div>

    <!-- Biến thể sản phẩm -->
    <div class="mb-3 border p-3 rounded bg-light">
        <div class="row mb-2">
            <div class="col">
                <select id="colorSelect" class="form-select" required></select>
            </div>
            <div class="col">
                <select id="sizeSelect" class="form-select" required></select>
            </div>
            <div class="col">
                <input type="number" id="quantityInput" class="form-control" placeholder="Số lượng" required />
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-success" onclick="addVariant()">Thêm biến thể</button>
            </div>
        </div>

        <ul id="variantList" class="list-group mb-2"></ul>
        <input type="hidden" name="variantsJson" id="variantsJson" />
    </div>

    <div class="mb-2">
        <input name="images" type="file" multiple class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Tạo sản phẩm</button>
</form>

<hr />

<!-- Bộ lọc và tìm kiếm -->
<div class="card p-3 mb-4 border border-primary-subtle shadow-sm">
    <div class="row g-3 align-items-end">
        <div class="col-md-4">
            <label class="form-label">Tìm theo tên</label>
            <input type="text" id="searchName" class="form-control" placeholder="Nhập tên sản phẩm..." />
        </div>
        <div class="col-md-2">
            <label class="form-label">Danh mục</label>
            <select id="filterCategory" class="form-select">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Màu</label>
            <select id="filterColor" class="form-select">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Size</label>
            <select id="filterSize" class="form-select">
                <option value="">Tất cả</option>
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label">Số lượng tối thiểu</label>
            <input type="number" id="filterQuantity" class="form-control" min="0" />
        </div>
        <div class="col-md-2">
            <label class="form-label">Giá tối đa</label>
            <input type="number" id="filterPrice" class="form-control" min="0" />
        </div>
        <div class="col-md-2 d-grid">
            <button class="btn btn-primary" onclick="applyFilters()">Lọc</button>
        </div>
        <div class="col-md-2 d-grid">
            <button class="btn btn-secondary" onclick="resetFilters()">Đặt lại</button>
        </div>
    </div>
</div>

<!-- Danh sách sản phẩm -->
<div id="productList" class="row"></div>

<!-- Phân trang -->
<nav>
    <ul class="pagination justify-content-center mt-3" id="pagination"></ul>
</nav>

<!-- Modal xem chi tiết -->
<div class="modal fade" id="productDetailModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chi tiết sản phẩm</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="detailImages" class="d-flex flex-wrap gap-2 mb-3"></div>
                <h4 id="detailName"></h4>
                <p id="detailDescription"></p>
                <p><strong>Giá:</strong> <span id="detailPrice"></span></p>
                <p><strong>Danh mục:</strong> <span id="detailCategory"></span></p>
                <p><strong>Biến thể:</strong></p>
                <ul id="detailVariants"></ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
             function getAccessTokenFromCookie() {
            const match = document.cookie.match(/(?:^|; )accessToken=([^;]*)/);
            return match ? decodeURIComponent(match[1]) : ull;
        }

        async function authFetch(url, options = {}) {
            const token = getAccessTokenFromCookie();
            if (!options.headers) options.headers = {};
            options.headers['Authorization'] = `Bearer ${token}`;
            return fetch(url, options);
        }
        let currentPage = 1;
        const pageSize = 6;

        const variantList = [];
        const colorMap = new Map();
        const sizeMap = new Map();
        const categoryMap = new Map();

        async function loadDropdowns() {
            const [colorRes, sizeRes, categoryRes] = await Promise.all([
                authFetch('/api/colors/all'),
                authFetch('/api/sizes/all'),
                authFetch('/api/categories/all')
            ]);

            const colors = await colorRes.json();
            const sizes = await sizeRes.json();
            const categories = await categoryRes.json();

            const colorSelect = document.getElementById('colorSelect');
            const sizeSelect = document.getElementById('sizeSelect');
            const categorySelect = document.getElementById('categorySelect');

            colors.forEach(c => {
                colorMap.set(c.id, c.colors_name);
                colorSelect.innerHTML += `<option value="${c.id}">${c.colors_name}</option>`;
                document.getElementById("filterColor").innerHTML += `<option value="${c.id}">${c.colors_name}</option>`;
            });

            sizes.forEach(s => {
                sizeMap.set(s.id, s.size_name);
                sizeSelect.innerHTML += `<option value="${s.id}">${s.size_name}</option>`;
                document.getElementById("filterSize").innerHTML += `<option value="${s.id}">${s.size_name}</option>`;
            });

            categories.forEach(cat => {
                categoryMap.set(cat.id, cat.categories_name);
                categorySelect.innerHTML += `<option value="${cat.id}">${cat.categories_name}</option>`;
                document.getElementById("filterCategory").innerHTML += `<option value="${cat.id}">${cat.categories_name}</option>`;
            });
        }

        function addVariant() {
            const colorId = document.getElementById('colorSelect').value;
            const sizeId = document.getElementById('sizeSelect').value;
            const quantity = parseInt(document.getElementById('quantityInput').value);
            if (!colorId || !sizeId || !quantity || quantity <= 0) return alert("Vui lòng nhập đầy đủ và hợp lệ.");
            variantList.push({ colorId, sizeId, quantity });
            updateVariantList();
        }

        function updateVariantList() {
            const list = document.getElementById('variantList');
            list.innerHTML = "";
            variantList.forEach((v, i) => {
                list.innerHTML += `
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        ${colorMap.get(v.colorId)} - ${sizeMap.get(v.sizeId)} - SL: ${v.quantity}
                        <button type="button" class="btn btn-sm btn-danger" onclick="removeVariant(${i})">X</button>
                    </li>`;
            });
            document.getElementById('variantsJson').value = JSON.stringify(variantList);
        }

        function removeVariant(index) {
            variantList.splice(index, 1);
            updateVariantList();
        }

        async function loadProducts(page = 1) {
            const res = await authFetch(`/api/products?page=${page}&pageSize=${pageSize}`);
            const data = await res.json();
            const container = document.getElementById("productList");
            container.innerHTML = "";

            // Filter client-side
            const search = document.getElementById("searchName").value.trim().toLowerCase();
            const selectedCategory = document.getElementById("filterCategory").value;
            const selectedColor = document.getElementById("filterColor").value;
            const selectedSize = document.getElementById("filterSize").value;
            const minQty = parseInt(document.getElementById("filterQuantity").value);
            const maxPrice = parseFloat(document.getElementById("filterPrice").value);

            const filteredItems = data.items.filter(p => {
                if (search && !p.name.toLowerCase().includes(search)) return false;
                if (selectedCategory && p.categoryId !== selectedCategory) return false;
                if (maxPrice && p.price > maxPrice) return false;
                const hasValidVariant = (p.variants ?? []).some(v => {
                    if (selectedColor && v.colorId !== selectedColor) return false;
                    if (selectedSize && v.sizeId !== selectedSize) return false;
                    if (!isNaN(minQty) && v.quantity < minQty) return false;
                    return true;
                });
                return hasValidVariant || !(selectedColor || selectedSize || minQty);
            });

            filteredItems.forEach((p, i) => {
                const categoryName = categoryMap.get(p.categoryId) ?? "Không rõ";
                let variantsHtml = "";
                p.variants?.forEach(v => {
                    const colorName = colorMap.get(v.colorId) ?? v.colorId;
                    const sizeName = sizeMap.get(v.sizeId) ?? v.sizeId;
                    variantsHtml += `<li>${colorName} - ${sizeName} - SL: ${v.quantity}</li>`;
                });

                container.innerHTML += `
                    <div class="col-md-4 mb-4 ${i >= 3 ? 'mt-5' : ''}">
                        <div class="card h-100 shadow-sm product-card" style="cursor: pointer;" onclick='showProductDetail(${JSON.stringify(p).replace(/'/g, "\\'")})'>
                            <img src="${p.images?.[0] || ''}" class="card-img-top" style="max-height: 300px; object-fit: contain;" />
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">${p.name}</h5>
                                <p class="card-text">${p.description ?? ''}</p>
                                <p class="card-text"><strong>Giá:</strong> ${p.price}</p>
                                <p class="card-text"><strong>Danh mục:</strong> ${categoryName}</p>
                                <ul>${variantsHtml}</ul>
                                <div class="mt-auto d-flex justify-content-end gap-2">
                                    <button class="btn btn-warning btn-sm" onclick="event.stopPropagation(); editProduct('${p.id}')">Sửa</button>
                                    <button class="btn btn-danger btn-sm" onclick="event.stopPropagation(); deleteProduct('${p.id}')">Xóa</button>
                                </div>
                            </div>
                        </div>
                    </div>`;
            });

            const pagEl = document.getElementById("pagination");
            pagEl.innerHTML = "";
            for (let i = 1; i <= data.totalPages; i++) {
                pagEl.innerHTML += `<li class="page-item ${i === data.currentPage ? 'active' : ''}">
                    <button class="page-link" onclick="loadProducts(${i})">${i}</button>
                </li>`;
            }
        }

        async function deleteProduct(id) {
            if (!confirm("Xác nhận xoá?")) return;
            const res = await authFetch(`/api/products/${id}`, { method: "DELETE" });
            if (res.ok) {
                alert("Đã xoá");
                loadProducts(currentPage);
            } else {
                alert("Không tìm thấy sản phẩm");
            }
        }

        let editingProductId = null;
        function editProduct(id) {
            authFetch(`/api/products/${id}`)
                .then(res => res.json())
                .then(p => {
                    editingProductId = p.id;
                    document.querySelector('input[name="name"]').value = p.name;
                    document.querySelector('input[name="price"]').value = p.price;
                    document.querySelector('textarea[name="description"]').value = p.description ?? '';
                    document.querySelector('select[name="categoryId"]').value = p.categoryId;
                    variantList.length = 0;
                    (p.variants ?? []).forEach(v => variantList.push(v));
                    updateVariantList();
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    document.querySelector('#createForm button[type="submit"]').textContent = "Cập nhật sản phẩm";
                });
        }

        document.getElementById("createForm").addEventListener("submit", async function (e) {
            e.preventDefault();
            document.getElementById('variantsJson').value = JSON.stringify(variantList);
            const formData = new FormData(this);
            let url = "/api/products", method = "POST";
            if (editingProductId) {
                url += `/${editingProductId}`;
                method = "PUT";
                formData.append("id", editingProductId);
            }
            const res = await authFetch(url, { method, body: formData });
            if (res.ok) {
                editingProductId = null;
                document.querySelector('#createForm button[type="submit"]').textContent = "Tạo sản phẩm";
                alert("Tạo thành công!");
                this.reset();
                variantList.length = 0;
                updateVariantList();
                loadProducts(1);
            } else {
                const err = await res.text();
                alert("Lỗi: " + err);
            }
        });

        function showProductDetail(p) {
            const container = document.getElementById("detailImages");
            container.innerHTML = "";
            (p.images ?? []).forEach(img => {
                const el = document.createElement("img");
                el.src = img;
                el.className = "img-thumbnail";
                el.style.maxHeight = "200px";
                el.style.marginRight = "10px";
                container.appendChild(el);
            });
            document.getElementById("detailName").textContent = p.name;
            document.getElementById("detailDescription").textContent = p.description ?? '';
            document.getElementById("detailPrice").textContent = p.price;
            document.getElementById("detailCategory").textContent = categoryMap.get(p.categoryId) ?? "Không rõ";
            const list = document.getElementById("detailVariants");
            list.innerHTML = "";
            (p.variants ?? []).forEach(v => {
                const color = colorMap.get(v.colorId) ?? v.colorId;
                const size = sizeMap.get(v.sizeId) ?? v.sizeId;
                list.innerHTML += `<li>${color} - ${size} - SL: ${v.quantity}</li>`;
            });
            const modal = new bootstrap.Modal(document.getElementById('productDetailModal'));
            modal.show();
        }

        function applyFilters() {
            loadProducts(1);
        }

        function resetFilters() {
            document.getElementById("searchName").value = '';
            document.getElementById("filterCategory").value = '';
            document.getElementById("filterColor").value = '';
            document.getElementById("filterSize").value = '';
            document.getElementById("filterQuantity").value = '';
            document.getElementById("filterPrice").value = '';
            loadProducts(1);
        }

        loadDropdowns().then(() => loadProducts());
    </script>
}
