@page
@model LTWNC.Pages.Order.IndexModel

@{
    ViewData["Title"] = "Danh sách Đơn hàng";
}

<h2>Danh sách Đơn hàng</h2>

<div class="mb-3 d-flex flex-wrap gap-2 align-items-center" style="background:#f9fafb;padding:15px;border-radius:8px;">
    <input type="text" id="searchText" class="form-control d-inline w-auto" style="min-width:200px" placeholder="🔍 Tìm kiếm đơn hàng, khách hàng, trạng thái..." />
    <input type="date" id="fromDate" class="form-control d-inline w-auto" />
    <input type="date" id="toDate" class="form-control d-inline w-auto" />
    <select id="sortOrder" class="form-select d-inline w-auto" style="min-width:100px">
        <option value="desc">Mới nhất</option>
        <option value="asc">Cũ nhất</option>
    </select>
    <select id="statusFilter" class="form-select d-inline w-auto" style="min-width:120px">
        <option value="">-- Tất cả trạng thái --</option>
        <option value="pending">Chờ thanh toán</option>
        <option value="paid">Đã thanh toán</option>
        <option value="cancelled">Đã hủy</option>
    </select>
    <select id="categoryFilter" class="form-select d-inline w-auto" style="min-width:150px">
        <option value="">-- Tất cả danh mục --</option>
    </select>
    <button id="btnSearch" class="btn btn-primary px-4"><i class="bi bi-search"></i> Tìm</button>
</div>

<table class="table table-bordered table-striped mt-3 text-center align-middle">
    <thead>
        <tr>
            <th>Order ID</th>
            <th>Tên KH</th>
            <th>Danh mục</th>
            <th>Số lượng</th>
            <th>Tiền</th>
            <th>Ngày đặt hàng</th>
            <th>Trạng thái</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="ordersTableBody"></tbody>
</table>

<div class="d-flex justify-content-between align-items-center mt-3">
    <button id="prevBtn" class="btn btn-secondary">◀️ Trang trước</button>
    <span id="pageInfo"></span>
    <button id="nextBtn" class="btn btn-secondary">Trang sau ▶️</button>
</div>

@section Scripts {
    <script>
        function getAccessTokenFromCookie() {
            const match = document.cookie.match(/(?:^|; )accessToken=([^;]*)/);
            return match ? decodeURIComponent(match[1]) : null;
        }

        async function authFetch(url, options = {}) {
            const token = getAccessTokenFromCookie();
            if (!options.headers) options.headers = {};
            options.headers['Authorization'] = `Bearer ${token}`;
            return fetch(url, options);
        }
        let products = [];
        let categories = [];
        let customers = [];
        const pageSize = 10;
        let currentPage = 1;
        let totalPages = 1;

        async function loadInitialData() {
            try {
                const [productRes, categoryRes, customerRes] = await Promise.all([
                    authFetch('/api/products?page=1&pageSize=1000'),
                    authFetch('/api/categories/all'),
                    authFetch('/api/customer') // chỉ cần /api/customer vì controller CustomerController, GET All
                ]);
                if (!productRes.ok || !categoryRes.ok || !customerRes.ok) throw new Error('Không lấy được dữ liệu danh mục, sản phẩm hoặc khách hàng');
                products = (await productRes.json()).items || [];
                categories = await categoryRes.json() || [];
                        const customerData = await customerRes.json();
        customers = customerData.items || []; // chỉ lấy mảng 'items'

                populateCategoryFilter(categories);
                return true;
            } catch (e) {
                alert(e.message);
                return false;
            }
        }

        function populateCategoryFilter(categories) {
            const categorySelect = document.getElementById("categoryFilter");
            categories.forEach(cat => {
                const opt = document.createElement("option");
                opt.value = cat.id || cat._id;
                opt.text = cat.categories_name;
                categorySelect.appendChild(opt);
            });
        }

        function getCustomerNameById(id) {
            if (!id) return "Không rõ";
            const customer = customers.find(c => c.id === id || c._id === id);
            return customer ? (customer.customer_name || customer.CustomerName || "Không rõ") : "Không rõ";
        }

        function getCategoryNameByProduct(productId) {
            const product = products.find(p => p.id === productId || p._id === productId);
            const catId = product?.categoryId;
            const category = categories.find(c => c.id === catId || c._id === catId);
            return category?.categories_name || "Không rõ";
        }

        function getPayingStatusLabel(status) {
            switch ((status || "").toLowerCase()) {
                case "pending": return "Chờ thanh toán";
                case "paid":
                case "payed": return "Đã thanh toán";
                case "cancelled": return "Đã hủy";
                default: return "Không rõ";
            }
        }
        function getPayingStatusColor(status) {
            switch ((status || "").toLowerCase()) {
                case "pending": return "text-warning";
                case "paid":
                case "payed": return "text-success";
                case "cancelled": return "text-danger";
                default: return "text-secondary";
            }
        }

        async function loadOrders(page = 1) {
            currentPage = page;
            const filterCategoryId = document.getElementById("categoryFilter").value;
            const statusFilter = document.getElementById("statusFilter").value;
            const searchText = (document.getElementById("searchText").value || "").trim().toLowerCase();
            const sortOrder = document.getElementById("sortOrder").value;
            const fromDate = document.getElementById("fromDate").value;
            const toDate = document.getElementById("toDate").value;

            try {
                const orderRes = await authFetch(`/api/orders?page=1&pageSize=1000`);
                if (!orderRes.ok) {
                    const text = await orderRes.text();
                    alert("Lỗi khi lấy dữ liệu ĐƠN HÀNG: " + orderRes.status + " - " + text);
                    return;
                }

                const ordersData = await orderRes.json();
                const productMap = new Map();
                products.forEach(p => {
                    const id = p.id || p._id;
                    if (id) productMap.set(id, p);
                });

                let rows = [];

                (ordersData.items || []).forEach(order => {
                    const items = order.Items || order.items || [];
                    let totalQuantity = 0;
                    let totalAmount = 0;
                    let categoryNames = new Set();

                    items.forEach(item => {
                        const productId = item.productId || item.ProductId;
                        const product = productMap.get(productId) || {};
                        const price = product.price || 0;
                        const quantity = item.quantity || item.Quantity || 0;
                        totalQuantity += quantity;
                        totalAmount += price * quantity;
                        const catName = getCategoryNameByProduct(productId);
                        if (catName && catName !== "Không rõ") categoryNames.add(catName);
                    });

                    const customerId = order.customerID || order.CustomerID;
                    const customerName = getCustomerNameById(customerId);
                    const createdAt = order.createdAt || order.CreatedAt || "";
                    const phone = order.customerPhone || order.CustomerPhone || "";
                    const status = (order.payingStatus || "unknown").toLowerCase();

                    if (fromDate && new Date(createdAt) < new Date(fromDate)) return;
                    if (toDate && new Date(createdAt) > new Date(toDate + "T23:59:59")) return;

                    // Tìm kiếm linh hoạt nhiều trường
                    if (searchText && !(
                        customerName.toLowerCase().includes(searchText) ||
                        (order.id || order.Id || "").toLowerCase().includes(searchText) ||
                        phone.toLowerCase().includes(searchText) ||
                        status.includes(searchText)
                    )) return;

                    if (filterCategoryId) {
                        const matched = items.some(item => {
                            const productId = item.productId || item.ProductId;
                            const product = productMap.get(productId);
                            const categoryId = product?.categoryId;
                            return categoryId === filterCategoryId || categoryId === filterCategoryId.toString();
                        });
                        if (!matched) return;
                    }
                    if (statusFilter && status !== statusFilter) return;

                    rows.push({
                        orderId: order.id || order.Id,
                        customerName,
                        categoryName: [...categoryNames].join("<br>"),
                        totalQuantity,
                        totalAmount,
                        payingStatus: status,
                        createdAt
                    });
                });

                rows.sort((a, b) => {
                    return sortOrder === "desc"
                        ? new Date(b.createdAt) - new Date(a.createdAt)
                        : new Date(a.createdAt) - new Date(b.createdAt);
                });

                const totalItems = rows.length;
                totalPages = Math.max(1, Math.ceil(totalItems / pageSize));
                const pagedRows = rows.slice((currentPage - 1) * pageSize, currentPage * pageSize);

                const tbody = document.getElementById("ordersTableBody");
                tbody.innerHTML = "";

                if (pagedRows.length === 0) {
                    const tr = document.createElement("tr");
                    tr.innerHTML = `<td colspan="8" class="text-center">Không có đơn hàng nào!</td>`;
                    tbody.appendChild(tr);
                } else {
                    pagedRows.forEach(row => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                            <td>${row.orderId}</td>
                            <td>${row.customerName}</td>
                            <td style="white-space: normal">${row.categoryName}</td>
                            <td>${row.totalQuantity}</td>
                            <td>${row.totalAmount.toLocaleString()}₫</td>
                            <td><span>${new Date(row.createdAt).toLocaleString('vi-VN')}</span></td>
                            <td><span class="${getPayingStatusColor(row.payingStatus)}">${getPayingStatusLabel(row.payingStatus)}</span></td>
                            <td>
                                <a href="/Order/Detail?id=${row.orderId}" class="btn btn-info btn-sm">
                                    <i class="bi bi-eye"></i> Xem đơn hàng
                                </a>
                            </td>
                        `;
                        tbody.appendChild(tr);
                    });
                }

                document.getElementById('pageInfo').innerText = `Trang ${currentPage} / ${totalPages}`;
                document.getElementById('prevBtn').disabled = currentPage <= 1;
                document.getElementById('nextBtn').disabled = currentPage >= totalPages;

            } catch (error) {
                alert("Lỗi khi tải dữ liệu đơn hàng: " + error.message);
            }
        }

        document.addEventListener("DOMContentLoaded", async () => {
            const ok = await loadInitialData();
            if (!ok) return;
            loadOrders(1);
            document.getElementById('categoryFilter').addEventListener('change', () => loadOrders(1));
            document.getElementById('statusFilter').addEventListener('change', () => loadOrders(1));
            document.getElementById('btnSearch').addEventListener('click', () => loadOrders(1));
            document.getElementById('prevBtn').addEventListener('click', () => {
                if (currentPage > 1) loadOrders(currentPage - 1);
            });
            document.getElementById('nextBtn').addEventListener('click', () => {
                if (currentPage < totalPages) loadOrders(currentPage + 1);
            });
        });
    </script>
}
