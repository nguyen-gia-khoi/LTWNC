@page
@model LTWNC.Pages.Order.DetailModel

@{
    ViewData["Title"] = "Chi tiết đơn hàng";
}

<h2>Chi tiết đơn hàng</h2>

<div id="orderDetail" class="border p-3 rounded" style="background:#f1f5f9;">
    <p>Đang tải chi tiết đơn hàng...</p>
</div>

<a href="/Order/Index" class="btn btn-secondary mt-3">⬅️ Quay lại danh sách</a>

@section Scripts {
    <script>
        // --- CÁC HÀM TIỆN ÍCH ---
        function getAccessTokenFromCookie() {
            const match = document.cookie.match(/(?:^|; )accessToken=([^;]*)/);
            return match ? decodeURIComponent(match[1]) : null;
        }

        async function authFetch(url, options = {}) {
            const token = getAccessTokenFromCookie();
            if (!options.headers) options.headers = {};
            options.headers['Authorization'] = `Bearer ${token}`;
            return fetch(url, options);
        }

        function getPayingStatusLabel(status) {
            switch ((status || "").toLowerCase()) {
                case "pending": return "Chờ thanh toán";
                case "paid": case "payed": return "Đã thanh toán";
                case "cancelled": return "Đã hủy";
                default: return "Không rõ";
            }
        }

        // === ĐÃ THÊM: HÀM LẤY NHÃN TRẠNG THÁI GIAO HÀNG ===
        function getShippingStatusLabel(status) {
            switch ((status || "").toLowerCase()) {
                case "pending": return "Đang xử lý";
                case "shipping": return "Đang giao hàng";
                case "delivered": return "Đã giao hàng";
                case "failed": return "Giao hàng thất bại";
                default: return "Chưa có thông tin";
            }
        }

        // --- KHỞI TẠO BIẾN ---
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('id');
        let currentOrder = null;

        // Gắn Event Listener vào body ngay từ đầu
        document.body.addEventListener("click", (e) => {
            if (!currentOrder) return;
            if (e.target.id === "cancelBtn") {
                rejectOrder(currentOrder);
            } else if (e.target.id === "restoreBtn") {
                restoreOrder(currentOrder);
            }
        });

        // Tải dữ liệu khi trang được load
        document.addEventListener("DOMContentLoaded", () => {
            loadOrderDetail();
        });


        // --- CÁC HÀM XỬ LÝ HÀNH ĐỘNG ---
        async function restoreOrder(order) {
            if (!confirm("Bạn có chắc muốn khôi phục đơn hàng này?")) return;
            const updatedOrder = { ...order, payingStatus: "pending" };
            const res = await authFetch(`/api/orders/${order.id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedOrder)
            });
            if (res.ok) {
                alert("✅ Đơn hàng đã được khôi phục");
                loadOrderDetail();
            } else {
                alert("❌ Lỗi khi khôi phục đơn hàng");
            }
        }

        async function rejectOrder(order) {
            if (!confirm("Bạn có chắc muốn từ chối đơn hàng này?")) return;
            const updatedOrder = { ...order, payingStatus: "cancelled" };
            const res = await authFetch(`/api/orders/${order.id}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedOrder)
            });
            if (res.ok) {
                alert("✅ Đã từ chối đơn hàng");
                loadOrderDetail();
            } else {
                alert("❌ Lỗi khi cập nhật trạng thái đơn hàng");
            }
        }

        // --- HÀM TẢI VÀ HIỂN THỊ DỮ LIỆU CHÍNH ---
        async function loadOrderDetail() {
            if (!orderId) {
                document.getElementById("orderDetail").innerHTML = `<div class="alert alert-danger">Không tìm thấy mã đơn hàng!</div>`;
                return;
            }

            try {
                const [orderRes, productsRes, colorsRes, sizesRes] = await Promise.all([
                    authFetch(`/api/orders/${orderId}`),
                    authFetch('/api/products?page=1&pageSize=1000'),
                    authFetch('/api/colors/all'),
                    authFetch('/api/sizes/all')
                ]);

                if (!orderRes.ok) throw new Error("Không tìm thấy đơn hàng hoặc không có quyền truy cập.");

                const order = await orderRes.json();
                currentOrder = order;

                const allProducts = (await productsRes.json()).items || [];
                const allColors = await colorsRes.json();
                const allSizes = await sizesRes.json();

                let itemsHtml = '';
                let totalAmount = 0;
                for (const item of order.items) {
                    const product = allProducts.find(p => p.id === item.productId) || { name: 'Sản phẩm không tồn tại', price: 0 };
                    const color = allColors.find(c => c.id === item.colorId) || { colors_name: 'N/A' };
                    const size = allSizes.find(s => s.id === item.sizeId) || { size_name: 'N/A' };
                    const itemTotal = (product.price || 0) * item.quantity;
                    totalAmount += itemTotal;
                    itemsHtml += `
                        <tr>
                            <td>${product.name}</td>
                            <td>${color.colors_name}</td>
                            <td>${size.size_name}</td>
                            <td>${item.quantity}</td>
                            <td>${(product.price || 0).toLocaleString('vi-VN')} ₫</td>
                            <td>${itemTotal.toLocaleString('vi-VN')} ₫</td>
                        </tr>
                    `;
                }

                const customerRes = await authFetch(`/api/customer/${order.customerID}`);
                const customer = customerRes.ok ? await customerRes.json() : {};
                const name = customer.customer_name || customer.name || "Không rõ";
                const phone = order.customerPhone || "Không rõ";
                const address = order.customerAddress || "Không rõ";

                // === ĐÃ THÊM: DÒNG HIỂN THỊ TRẠNG THÁI GIAO HÀNG ===
                let html = `
                    <p><strong>Mã đơn hàng:</strong> ${order.id}</p>
                    <p><strong>Khách hàng:</strong> ${name}</p>
                    <p><strong>Email:</strong> ${customer.email || "Không rõ"}</p>
                    <p><strong>Điện thoại:</strong> ${phone}</p>
                    <p><strong>Địa chỉ giao hàng:</strong> ${address}</p>
                    <p><strong>Ngày tạo:</strong> ${new Date(order.createdAt).toLocaleString('vi-VN')}</p>
                    <p><strong>Trạng thái thanh toán:</strong> <span class="fw-bold">${getPayingStatusLabel(order.payingStatus)}</span></p>
                    <p><strong>Trạng thái giao hàng:</strong> <span class="fw-bold">${getShippingStatusLabel(order.deliveryStatus)}</span></p>
                    <hr />
                    <h5>Sản phẩm trong đơn hàng:</h5>
                    <table class="table table-bordered text-center align-middle">
                        <thead class="table-light"><tr><th>Tên sản phẩm</th><th>Màu sắc</th><th>Kích cỡ</th><th>Số lượng</th><th>Đơn giá</th><th>Thành tiền</th></tr></thead>
                        <tbody>${itemsHtml || '<tr><td colspan="6">Không có sản phẩm nào.</td></tr>'}</tbody>
                        <tfoot><tr><td colspan="5" class="text-end"><strong>Tổng cộng:</strong></td><td class="fw-bold">${totalAmount.toLocaleString('vi-VN')} ₫</td></tr></tfoot>
                    </table>
                `;

                if (order.payingStatus === "cancelled") {
                    html += `<div class="d-flex gap-2 mt-3"><button id="restoreBtn" class="btn btn-success">🔄 Khôi phục đơn hàng</button></div>`;
                } else {
                    html += `<div class="d-flex gap-2 mt-3">
                                <a href="/Order/Edit?id=${order.id}" class="btn btn-warning">✏️ Cập nhật đơn hàng</a>
                                <button id="cancelBtn" class="btn btn-danger">❌ Từ chối đơn hàng</button>
                             </div>`;
                }

                document.getElementById("orderDetail").innerHTML = html;
            } catch (err) {
                document.getElementById("orderDetail").innerHTML = `<div class="alert alert-danger">${err.message}</div>`;
            }
        }
    </script>
}
