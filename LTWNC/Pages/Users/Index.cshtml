@page
@model LTWNC.Pages.Users.IndexModel

@{
    ViewData["Title"] = "Quản lý Người dùng";
}

<h2>Quản lý Người dùng</h2>

<table class="table table-bordered" id="userTable">
    <thead>
        <tr>
            <th>Tên</th>
            <th>Email</th>
            <th>Tuổi</th>
            <th>Giới tính</th>
            <th>Vai trò</th>
            <th>SĐT</th>
            <th>Hành động</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<div class="d-flex justify-content-between mt-3">
    <button id="prevBtn" class="btn btn-secondary">◀️ Trang trước</button>
    <span id="pageInfo"></span>
    <button id="nextBtn" class="btn btn-secondary">Trang sau ▶️</button>
</div>

@section Scripts {
    <script>
        function getAccessTokenFromCookie() {
            const match = document.cookie.match(/(?:^|; )accessToken=([^;]*)/);
            return match ? decodeURIComponent(match[1]) : null;
        }

        async function authFetch(url, options = {}) {
            const token = getAccessTokenFromCookie();
            if (!options.headers) options.headers = {};
            options.headers['Authorization'] = `Bearer ${token}`;
            return fetch(url, options);
        }
        const customerApiUrl = '/api/customer';
        let currentPage = 1;
        const pageSize = 5;

        async function loadUsers(page = 1) {
            const token = getAccessTokenFromCookie();
            const res = await authFetch(`${customerApiUrl}?page=${page}&pageSize=${pageSize}`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            const data = await res.json();
            const users = data.items;


            const tbody = document.querySelector('#userTable tbody');
            tbody.innerHTML = '';

            users.forEach(u => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span id="name_${u.id}">${u.customer_name}</span></td>
                    <td><span id="email_${u.id}">${u.email}</span></td>
                    <td><span id="age_${u.id}">${u.age}</span></td>
                    <td><span id="gender_${u.id}">${u.gender}</span></td>
                    <td><span id="role_${u.id}">${u.role}</span></td>
                    <td><span id="phone_${u.id}">${u.phoneNumber}</span></td>
                    <td>
                        <button class="btn btn-warning btn-sm" onclick="editUser('${u.id}')">Sửa</button>
                        <button class="btn btn-danger btn-sm" onclick="deleteUser('${u.id}')">Xoá</button>
                    </td>
                `;
                tbody.appendChild(row);
            });

            currentPage = data.currentPage;
            const totalPages = data.totalPages;

            document.getElementById('pageInfo').innerText = `Trang ${currentPage} / ${totalPages}`;
            document.getElementById('prevBtn').disabled = currentPage <= 1;
            document.getElementById('nextBtn').disabled = currentPage >= totalPages;
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('prevBtn').addEventListener('click', () => {
                if (currentPage > 1) loadUsers(currentPage - 1);
            });

            document.getElementById('nextBtn').addEventListener('click', () => {
                loadUsers(currentPage + 1);
            });

            loadUsers();
        });

        async function addUser() {
            const user = {
                customer_name: document.getElementById('userName').value.trim(),
                email: document.getElementById('userEmail').value.trim(),
                age: parseInt(document.getElementById('userAge').value),
                phoneNumber: document.getElementById('userPhone').value.trim(),
                gender: document.getElementById('userGender').value,
                role: document.getElementById('userRole').value,
                password: document.getElementById('userPassword').value.trim()
            };

            if (!user.customer_name || !user.email || !user.password) {
                alert("Tên, email, mật khẩu không được để trống!");
                return;
            }

            const res = await authFetch(customerApiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(user)
            });

            if (res.ok) {
                alert("Đã thêm người dùng");
                loadUsers(currentPage);
            } else {
                alert("Thêm thất bại");
            }
        }

        async function deleteUser(id) {
            if (!confirm("Bạn chắc chắn muốn xoá?")) return;

            const res = await authFetch(`${customerApiUrl}/${id}`, {
                method: 'DELETE'
            });

            if (res.ok) {
                alert("Xoá thành công");
                loadUsers(currentPage);
            } else {
                alert("Xoá thất bại");
            }
        }

        
    </script>
}
